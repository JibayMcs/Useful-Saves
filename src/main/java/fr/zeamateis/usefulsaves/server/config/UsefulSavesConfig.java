package fr.zeamateis.usefulsaves.server.config;

import fr.zeamateis.usefulsaves.UsefulSaves;
import net.minecraftforge.common.config.Config;
import net.minecraftforge.common.config.ConfigManager;
import net.minecraftforge.fml.client.event.ConfigChangedEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import java.util.HashMap;
import java.util.Map;
import java.util.TimeZone;

/**
 * @author ZeAmateis
 */
@Config(modid = UsefulSaves.MODID)
@Config.LangKey(UsefulSaves.MODID + ".config.title")
public class UsefulSavesConfig {

    @Config.Comment({"Define a TimeZone if server clock mismatch players clock", "Automaticly generated by default"})
    public static String timeZone = TimeZone.getDefault().getID();
    @Config.Comment("Define a backup folder")
    public static String backupsFolder = "./backups";
    @Config.Comment({"Define a json formatted cron task to save/load", "If \"enableTaskOnServerStart\" is enabled task will be loaded."})
    public static String cronTaskObject = "{}";

    @Config.Comment("Process save task if no player connected ?")
    public static boolean saveIfServerEmpty = false;
    @Config.Comment("Print Useful Saves messages in chat ?")
    public static boolean printMessage = true;

    @Config.Comment({"Enable the previous saved scheduled task on server start ?", "Ensure \"cronTask\" is not empty or null"})
    public static boolean enableTaskOnServerStart = true;

    @Config.Comment({"Defined to delete oldest backups if maximum saves are reach", "Used if \"maximumSavedBackups\" are defined"})
    public static boolean deleteOldOnMaximumReach = false;

    // @Config.Comment("Define compression level for backups archive files")
    //   public static int backupCompression = -1;

    @Config.Comment({"Define maximum created backups", "\"-1\" = unlimited saves"})
    public static int maximumSavedBackups = -1;

    @Config.Comment({"Define a list of files or folder to save on saving process", "Use absolute path !"})
    public static Map<String, String> savedFileWhitelist = new HashMap<>();

    @Mod.EventBusSubscriber(modid = UsefulSaves.MODID)
    private static class EventHandler {

        /**
         * Inject the new values and save to the config file when the config has been changed from the GUI.
         *
         * @param event The event
         */
        @SubscribeEvent
        public static void onConfigChanged(final ConfigChangedEvent.OnConfigChangedEvent event) {
            if (event.getModID().equals(UsefulSaves.MODID)) {
                ConfigManager.sync(UsefulSaves.MODID, Config.Type.INSTANCE);
            }
        }
    }
}
